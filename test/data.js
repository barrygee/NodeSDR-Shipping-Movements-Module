const chai                         = require('chai')
const expect                       = require('chai').expect
const chaiAsPromised               = require('chai-as-promised')
const shippingMovementHTMLResponse = require('./data/shippingMovementsHTMLResponse.json')
const data                         = require('../data')
const utils                        = require('../../../utils')
const Port                         = require('../database/models/Port')
const patterns                     = require('../config/patterns').portOfTyne()

chai.use(chaiAsPromised)

describe('Get, parse, save data (data.js)', () => {

    describe('getData()', () => {

        it('should return a Promise when the port and status provided are matched in ports.json', () => {
            expect(data.getData(utils, 'tyne', 'expected')).to.be.instanceOf(Promise)   
        });

        it('should return an Error when port and status are not provided', () => {
            expect(data.getData(utils)).to.be.instanceOf(Error).with.property('message', 'port and status values are required - one for more was missing in portData.getData()')
        });

        it('should reject with message when a matching port and status cannot be found in ports.json', () => {
            expect(data.getData(utils, 'testPort', 'testStatus')).to.be.instanceOf(Error).with.property('message', 'Cannot read property \'urls\' of undefined')
        });
    })

    describe('parseData()', () => {

        it('should return no ships when the database does not contain records containing the provded filter', () => {
            const parsedShipingMovementHTMLResponseIntoJSON = data.parseData(utils, shippingMovementHTMLResponse.response, 'THIS DOES NOT EXIST')
            expect(parsedShipingMovementHTMLResponseIntoJSON).to.equal(`{"status": \"No ships found with the name provided\"}`)
        })
    })

    describe('populateShippingMovementsArray()', () => {

        it('should return an error if all required properties are not provided', () => {
            expect(data.populateShippingMovementsArray()).to.be.instanceOf(Error).with.property('message', 'utils and table rows data must be provided')
        })

        it('should return an error if an empty \'rows\' Array is provided', () => {
            const rows = []
            const keys = ['value001', 'value002', 'value003', 'value004', 'value005']
            expect(data.populateShippingMovementsArray(utils, rows, keys)).to.be.instanceOf(Error).with.property('message', 'utils and table rows data must be provided')
        })

        it('should return an error if an empty \'keys\' Array is provided', () => {
            const rows = ['table row', 'data']
            const keys = []
            expect(data.populateShippingMovementsArray(utils, rows, keys)).to.be.instanceOf(Error).with.property('message', 'utils and table rows data must be provided')
        })

        it('should return an Array of values filtered by the shipNameFilter value provided', () => {
            const rows = ['<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">EXAMPLE Vessel</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 17:24 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>TCT 3</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Zeebrugge</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>9046368</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Sailing</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>ISLE OF MAN</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>9576</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>NSA UK Ltd</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/9046368.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>', '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">KING SEAWAYS</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 16:40 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>RORO 3</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>IJmuiden/Velsen</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Sailing</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>', '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">EXAMPLE SEAWAYS</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 16:40 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>RORO 3</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>IJmuiden/Velsen</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Sailing</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>']
            const keys = ['ship_name', 'start', 'eta_etd', 'arr_move_sail', 'from', 'to', 'flag', 'order', 'imo', 'grt', 'agent', 'callsign', 'image']
            expect(data.populateShippingMovementsArray(utils, rows, keys, 'EXAMPLE')).to.be.an('array')
                                                                                     .and.to.have.lengthOf(2)
        })

        it('should return an unfiltered Array of values', () => {
            const rows = ['<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">EXAMPLE Vessel</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 17:24 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>TCT 3</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Zeebrugge</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>9046368</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Sailing</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>ISLE OF MAN</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>9576</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>NSA UK Ltd</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/9046368.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>', '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">KING SEAWAYS</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 16:40 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>RORO 3</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>IJmuiden/Velsen</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Sailing</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>', '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">EXAMPLE SEAWAYS</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 16:40 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>RORO 3</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>IJmuiden/Velsen</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Sailing</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>']
            const keys = ['ship_name', 'start', 'eta_etd', 'arr_move_sail', 'from', 'to', 'flag', 'order', 'imo', 'grt', 'agent', 'callsign', 'image']
            const t = data.populateShippingMovementsArray(utils, rows, keys)
            expect(data.populateShippingMovementsArray(utils, rows, keys)).to.be.an('array')
                                                                          .and.to.have.lengthOf(3)
        })
    })

    describe('constructShippingMovementsArrayItem()', () => {

        it('should return an error if all required properties are not provided', () => {
            expect(data.constructShippingMovementsArrayItem()).to.be.instanceOf(Error).with.property('message', 'pattern, utils, row are all required')
        })

        it('should return an empty string when the pattern provided is not found in the row provided', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>IJmuiden/Velsen</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>RORO 3</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.expected, utils, row)).to.equal('')
        })

        it('should return the expected ship name', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.ship_name, utils, row)).to.equal('TEST SHIPNAME')
        })

        it('should return the expected \'start\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.start, utils, row)).to.equal('16/04/2019 08:43 ')
        })

        it('should return the expected estimated time of arrival / estimated time of departure value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.eta_etd, utils, row)).to.equal('')
        })

        it('should return the expected \'arr_move_sail\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.arr_move_sail, utils, row)).to.equal('Arrival')
        })

        it('should return the expected \'from\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.from, utils, row)).to.equal('Test Port')
        })

        it('should return the expected \'to\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.to, utils, row)).to.equal('Test Destination Port')
        })

        it('should return the expected \'flag\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.flag, utils, row)).to.equal('DENMARK')
        })

        it('should return the expected \'order\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.order, utils, row)).to.equal('')
        })

        it('should return the expected \'imo\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.imo, utils, row)).to.equal('0123456')
        })

        it('should return the expected \'imo\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.imo, utils, row)).to.equal('0123456')
        })

        it('should return the expected \'grt\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.grt, utils, row)).to.equal('01234')
        })

        it('should return the expected \'agent\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.agent, utils, row)).to.equal('Test Agent')
        })

        it('should return the expected \'callsign\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.callsign, utils, row)).to.equal('')
        })

        it('should return the expected \'image\' value', () => {
            const row = '<td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--name">TEST SHIPNAME</span></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label c-ShippingFeeds__label--toggle" aria-hidden="true">Start</span>16/04/2019 08:43 <svg class="c-ShippingFeeds__caret" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"> <g><rect x="-1" y="-1" width="582" height="402" fill="none"/></g> <g><polygon points="396.6 160 416 180.7 256 352 96 180.7 115.3 160 256 310.5"/></g> </svg></td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">From</span>Test Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">To</span>Test Destination Port</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">IMO</span>0123456</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Arr/Move/Sail</span>Arrival</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Flag</span>DENMARK</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">GRT</span>01234</td><td class="c-ShippingFeeds__row-data"><span class="c-ShippingFeeds__label" aria-hidden="true">Agent</span>Test Agent</td><td class="c-ShippingFeeds__row-data c-ShippingFeeds__row-data--image"><div class="c-ShippingFeeds__image"><img data-src="/storage/app/media/vessels/0123456.jpg"></div></td><td class="c-ShippingFeeds__row-data"></td>'
            expect(data.constructShippingMovementsArrayItem(patterns.image, utils, row)).to.equal('/storage/app/media/vessels/0123456.jpg')
        })
    })

    describe('saveData()', () => {

        it('should return Error \'Unable to save data\' if no portName is provided', () => {
           expect(data.saveData()).to.eventually.be.instanceOf(Error).with.property('message', 'Unable to save data')
        })
        
        it('should return a Port object', () => {
            expect(data.saveData('tyne')).to.eventually.be.instanceOf(Port)
        })
    })
})